/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { InvalidArgumentError } from "../../error/InvalidArgumentError.js";
import { SignInStartParams } from "../../interaction_client/parameter/SignInParams.js";
import { GrantTypeConstants } from "../../NativeAuthConstants.js";
import { NativeAuthApiRequestBase } from "./NativeAuthApiRequestBase.js";

export class InitiateRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: InitiateRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }

    static create(signInStartParams: SignInStartParams): InitiateRequest {
        // TODO: the codes here are just used to demo how to generate a request with parameters. We need to revisit it later to ensure the correctness.
        return new InitiateRequest(
            signInStartParams.authorityUrl, // This is incorrect. The requestUrl should be generated by authorityUrl.
            signInStartParams.correlationId,
            new InitiateRequestParameters(
                signInStartParams.username,
                signInStartParams.clientId,
                signInStartParams.challengeType.join(" "),
                signInStartParams.correlationId
            )
        );
    }
}

export class InitiateRequestParameters {
    constructor(
        public username: string,
        public clientId: string,
        public challengeType: string,
        correlationId: string
    ) {
        if (!correlationId) {
            throw new InvalidArgumentError("correlationId");
        }

        if (!username) {
            throw new InvalidArgumentError("username", correlationId);
        }

        if (!clientId) {
            throw new InvalidArgumentError("clientId", correlationId);
        }

        if (!challengeType) {
            throw new InvalidArgumentError("challengeType", correlationId);
        }
    }
}

export class ChallengeRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: ChallengeRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }

    static create(
        signInStartParams: SignInStartParams,
        continuationToken: string
    ): ChallengeRequest {
        // TODO: the codes here are just used to demo how to generate a request with parameters. We need to revisit it later to ensure the correctness.
        return new ChallengeRequest(
            signInStartParams.authorityUrl, // This is incorrect. The requestUrl should be generated by authorityUrl.
            signInStartParams.correlationId,
            new ChallengeRequestParameters(
                signInStartParams.clientId,
                signInStartParams.challengeType.join(" "),
                continuationToken,
                signInStartParams.correlationId
            )
        );
    }
}

export class ChallengeRequestParameters {
    /*
     * In the current Android implmenetation, it has a parameter named 'id', but this parameter cannot be found In the Native Auth API document.
     * Double check whether the parameter 'id' is required.
     */
    constructor(
        public clientId: string,
        public challengeType: string,
        public coninuationToken: string,
        correlationId: string
    ) {
        if (!correlationId) {
            throw new InvalidArgumentError("correlationId");
        }

        if (!clientId) {
            throw new InvalidArgumentError("clientId", correlationId);
        }

        if (!challengeType) {
            throw new InvalidArgumentError("challengeType", correlationId);
        }

        if (!coninuationToken) {
            throw new InvalidArgumentError("coninuationToken", correlationId);
        }
    }
}

export class OobTokenRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: OobTokenRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }
}

export class PasswordTokenRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: PasswordTokenRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }
}

export class ContinuationTokenRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: ContinuationTokenRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }
}

abstract class TokenRequestBase {
    constructor(
        public clientId: string,
        public continuationToken: string,
        public grantType: string,
        correlationId: string,
        public scopes?: Array<string>,
        public challengeType?: string
    ) {
        if (!correlationId) {
            throw new InvalidArgumentError("correlationId");
        }

        if (!clientId) {
            throw new InvalidArgumentError("clientId", correlationId);
        }

        if (!grantType) {
            throw new InvalidArgumentError("grantType", correlationId);
        }

        if (!continuationToken) {
            throw new InvalidArgumentError("continuationToken", correlationId);
        }
    }
}

export class OobTokenRequestParameters extends TokenRequestBase {
    constructor(
        clientId: string,
        continuationToken: string,
        correlationId: string,
        public oob: string,
        challengeType?: string,
        scopes?: Array<string>
    ) {
        super(
            clientId,
            continuationToken,
            GrantTypeConstants.OOB,
            correlationId,
            scopes,
            challengeType
        );

        if (!oob) {
            throw new InvalidArgumentError("oob", correlationId);
        }
    }
}

export class PasswordTokenRequestParameters extends TokenRequestBase {
    constructor(
        clientId: string,
        continuationToken: string,
        correlationId: string,
        public password: string,
        challengeType?: string,
        scopes?: Array<string>
    ) {
        super(
            clientId,
            continuationToken,
            GrantTypeConstants.PASSWORD,
            correlationId,
            scopes,
            challengeType
        );

        if (!password) {
            throw new InvalidArgumentError("password", correlationId);
        }
    }
}

export class ContinuationTokenRequestParameters extends TokenRequestBase {
    constructor(
        clientId: string,
        continuationToken: string,
        correlationId: string,
        public username: string,
        challengeType?: string,
        scopes?: Array<string>
    ) {
        super(
            clientId,
            continuationToken,
            GrantTypeConstants.CONTINUATION_TOKEN,
            correlationId,
            scopes,
            challengeType
        );

        if (!username) {
            throw new InvalidArgumentError("username", correlationId);
        }
    }
}
