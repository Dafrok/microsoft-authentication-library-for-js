/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { InvalidArgumentError } from "../../error/InvalidArgumentError.js";
import { SignInStartParams } from "../../interaction_client/parameter/SignInParams.js";
import { GrantType } from "../../NativeAuthConstants.js";
import { NativeAuthApiRequestBase } from "./NativeAuthApiRequestBase.js";

export class SignInInitiateRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: SignInInitiateRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }

    static create(signInStartParams: SignInStartParams): SignInInitiateRequest {
        // TODO: the codes here are just used to demo how to generate a request with parameters. We need to revisit it later to ensure the correctness.
        return new SignInInitiateRequest(
            signInStartParams.authorityUrl, // This is incorrect. The requestUrl should be generated by authorityUrl.
            signInStartParams.correlationId,
            new SignInInitiateRequestParameters(
                signInStartParams.username,
                signInStartParams.clientId,
                signInStartParams.challengeType.join(" "),
                signInStartParams.correlationId
            )
        );
    }
}

export class SignInInitiateRequestParameters {
    constructor(
        public username: string,
        public clientId: string,
        public challengeType: string,
        correlationId: string
    ) {
        if (!correlationId) {
            throw new InvalidArgumentError("correlationId");
        }

        if (!username) {
            throw new InvalidArgumentError("username", correlationId);
        }

        if (!clientId) {
            throw new InvalidArgumentError("clientId", correlationId);
        }

        if (!challengeType) {
            throw new InvalidArgumentError("challengeType", correlationId);
        }
    }
}

export class SignInChallengeRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: SignInChallengeRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }

    static create(
        signInStartParams: SignInStartParams,
        continuationToken: string
    ): SignInChallengeRequest {
        // TODO: the codes here are just used to demo how to generate a request with parameters. We need to revisit it later to ensure the correctness.
        return new SignInChallengeRequest(
            signInStartParams.authorityUrl, // This is incorrect. The requestUrl should be generated by authorityUrl.
            signInStartParams.correlationId,
            new SignInChallengeRequestParameters(
                signInStartParams.clientId,
                signInStartParams.challengeType.join(" "),
                continuationToken,
                signInStartParams.correlationId
            )
        );
    }
}

export class SignInChallengeRequestParameters {
    /*
     * In the current Android implmenetation, it has a parameter named 'id', but this parameter cannot be found In the Native Auth API document.
     * Double check whether the parameter 'id' is required.
     */
    constructor(
        public clientId: string,
        public challengeType: string,
        public coninuationToken: string,
        correlationId: string
    ) {
        if (!correlationId) {
            throw new InvalidArgumentError("correlationId");
        }

        if (!clientId) {
            throw new InvalidArgumentError("clientId", correlationId);
        }

        if (!challengeType) {
            throw new InvalidArgumentError("challengeType", correlationId);
        }

        if (!coninuationToken) {
            throw new InvalidArgumentError("coninuationToken", correlationId);
        }
    }
}

export class SignInOobTokenRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: SignInOobTokenRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }
}

export class SignInPasswordTokenRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: SignInPasswordTokenRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }
}

export class SignInContinuationTokenRequest extends NativeAuthApiRequestBase {
    constructor(
        requestUrl: string,
        correlationId: string,
        public parameters: SignInContinuationTokenRequestParameters,
        headers?: Record<string, string>
    ) {
        super(requestUrl, correlationId, headers);

        if (!parameters) {
            throw new InvalidArgumentError("parameters", correlationId);
        }
    }
}

abstract class SignInTokenRequestBase {
    constructor(
        public clientId: string,
        public continuationToken: string,
        public grantType: string,
        correlationId: string,
        public scopes?: Array<string>,
        public challengeType?: string
    ) {
        if (!correlationId) {
            throw new InvalidArgumentError("correlationId");
        }

        if (!clientId) {
            throw new InvalidArgumentError("clientId", correlationId);
        }

        if (!grantType) {
            throw new InvalidArgumentError("grantType", correlationId);
        }

        if (!continuationToken) {
            throw new InvalidArgumentError("continuationToken", correlationId);
        }
    }
}

export class SignInOobTokenRequestParameters extends SignInTokenRequestBase {
    constructor(
        clientId: string,
        continuationToken: string,
        correlationId: string,
        public oob: string,
        challengeType?: string,
        scopes?: Array<string>
    ) {
        super(
            clientId,
            continuationToken,
            GrantType.OOB,
            correlationId,
            scopes,
            challengeType
        );

        if (!oob) {
            throw new InvalidArgumentError("oob", correlationId);
        }
    }
}

export class SignInPasswordTokenRequestParameters extends SignInTokenRequestBase {
    constructor(
        clientId: string,
        continuationToken: string,
        correlationId: string,
        public password: string,
        challengeType?: string,
        scopes?: Array<string>
    ) {
        super(
            clientId,
            continuationToken,
            GrantType.PASSWORD,
            correlationId,
            scopes,
            challengeType
        );

        if (!password) {
            throw new InvalidArgumentError("password", correlationId);
        }
    }
}

export class SignInContinuationTokenRequestParameters extends SignInTokenRequestBase {
    constructor(
        clientId: string,
        continuationToken: string,
        correlationId: string,
        public username: string,
        challengeType?: string,
        scopes?: Array<string>
    ) {
        super(
            clientId,
            continuationToken,
            GrantType.CONTINUATION_TOKEN,
            correlationId,
            scopes,
            challengeType
        );

        if (!username) {
            throw new InvalidArgumentError("username", correlationId);
        }
    }
}
